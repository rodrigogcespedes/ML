/**
 */
package colmenaMLI.provider;

import colmenaMLI.util.ColmenaMLIAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ColmenaMLIItemProviderAdapterFactory extends ColmenaMLIAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ColmenaMLIItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.InfrastructureDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureDiagramItemProvider infrastructureDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.InfrastructureDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureDiagramAdapter() {
		if (infrastructureDiagramItemProvider == null) {
			infrastructureDiagramItemProvider = new InfrastructureDiagramItemProvider(this);
		}

		return infrastructureDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.FunctionalMs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalMsItemProvider functionalMsItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.FunctionalMs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalMsAdapter() {
		if (functionalMsItemProvider == null) {
			functionalMsItemProvider = new FunctionalMsItemProvider(this);
		}

		return functionalMsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.Authentication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthenticationItemProvider authenticationItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.Authentication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthenticationAdapter() {
		if (authenticationItemProvider == null) {
			authenticationItemProvider = new AuthenticationItemProvider(this);
		}

		return authenticationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.Authorization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthorizationItemProvider authorizationItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.Authorization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthorizationAdapter() {
		if (authorizationItemProvider == null) {
			authorizationItemProvider = new AuthorizationItemProvider(this);
		}

		return authorizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.Gateway} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GatewayItemProvider gatewayItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.Gateway}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGatewayAdapter() {
		if (gatewayItemProvider == null) {
			gatewayItemProvider = new GatewayItemProvider(this);
		}

		return gatewayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.ConfigServer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigServerItemProvider configServerItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.ConfigServer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigServerAdapter() {
		if (configServerItemProvider == null) {
			configServerItemProvider = new ConfigServerItemProvider(this);
		}

		return configServerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.Discovery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiscoveryItemProvider discoveryItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.Discovery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiscoveryAdapter() {
		if (discoveryItemProvider == null) {
			discoveryItemProvider = new DiscoveryItemProvider(this);
		}

		return discoveryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.LogServer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogServerItemProvider logServerItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.LogServer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogServerAdapter() {
		if (logServerItemProvider == null) {
			logServerItemProvider = new LogServerItemProvider(this);
		}

		return logServerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.InfrastructureConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureConfigItemProvider infrastructureConfigItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.InfrastructureConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureConfigAdapter() {
		if (infrastructureConfigItemProvider == null) {
			infrastructureConfigItemProvider = new InfrastructureConfigItemProvider(this);
		}

		return infrastructureConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.DockerConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DockerConfigItemProvider dockerConfigItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.DockerConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDockerConfigAdapter() {
		if (dockerConfigItemProvider == null) {
			dockerConfigItemProvider = new DockerConfigItemProvider(this);
		}

		return dockerConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.Diagrama} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiagramaItemProvider diagramaItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.Diagrama}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiagramaAdapter() {
		if (diagramaItemProvider == null) {
			diagramaItemProvider = new DiagramaItemProvider(this);
		}

		return diagramaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.Database} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatabaseItemProvider databaseItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.Database}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatabaseAdapter() {
		if (databaseItemProvider == null) {
			databaseItemProvider = new DatabaseItemProvider(this);
		}

		return databaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.Environment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentItemProvider environmentItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.Environment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentAdapter() {
		if (environmentItemProvider == null) {
			environmentItemProvider = new EnvironmentItemProvider(this);
		}

		return environmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.ModelRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelRelationItemProvider modelRelationItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.ModelRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelRelationAdapter() {
		if (modelRelationItemProvider == null) {
			modelRelationItemProvider = new ModelRelationItemProvider(this);
		}

		return modelRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link colmenaMLI.InfrastructureRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureRelationItemProvider infrastructureRelationItemProvider;

	/**
	 * This creates an adapter for a {@link colmenaMLI.InfrastructureRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureRelationAdapter() {
		if (infrastructureRelationItemProvider == null) {
			infrastructureRelationItemProvider = new InfrastructureRelationItemProvider(this);
		}

		return infrastructureRelationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (infrastructureDiagramItemProvider != null)
			infrastructureDiagramItemProvider.dispose();
		if (functionalMsItemProvider != null)
			functionalMsItemProvider.dispose();
		if (authenticationItemProvider != null)
			authenticationItemProvider.dispose();
		if (authorizationItemProvider != null)
			authorizationItemProvider.dispose();
		if (gatewayItemProvider != null)
			gatewayItemProvider.dispose();
		if (configServerItemProvider != null)
			configServerItemProvider.dispose();
		if (discoveryItemProvider != null)
			discoveryItemProvider.dispose();
		if (logServerItemProvider != null)
			logServerItemProvider.dispose();
		if (infrastructureConfigItemProvider != null)
			infrastructureConfigItemProvider.dispose();
		if (dockerConfigItemProvider != null)
			dockerConfigItemProvider.dispose();
		if (diagramaItemProvider != null)
			diagramaItemProvider.dispose();
		if (databaseItemProvider != null)
			databaseItemProvider.dispose();
		if (environmentItemProvider != null)
			environmentItemProvider.dispose();
		if (modelRelationItemProvider != null)
			modelRelationItemProvider.dispose();
		if (infrastructureRelationItemProvider != null)
			infrastructureRelationItemProvider.dispose();
	}

}
